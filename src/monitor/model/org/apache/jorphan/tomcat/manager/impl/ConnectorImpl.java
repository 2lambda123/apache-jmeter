//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2004.03.03 at 07:33:19 GMT-05:00 
//


package org.apache.jorphan.tomcat.manager.impl;

public class ConnectorImpl implements org.apache.jorphan.tomcat.manager.Connector, com.sun.xml.bind.unmarshaller.UnmarshallableObject, com.sun.xml.bind.serializer.XMLSerializable, com.sun.xml.bind.validator.ValidatableObject
{

    protected org.apache.jorphan.tomcat.manager.ThreadInfo _ThreadInfo;
    protected org.apache.jorphan.tomcat.manager.RequestInfo _RequestInfo;
    protected org.apache.jorphan.tomcat.manager.Workers _Workers;
    protected java.lang.String _Name;
    private final static com.sun.msv.grammar.Grammar schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize("\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/grammar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0003I\u0000\u000ecachedHashCodeL\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0002xp\u0006Z\u00845ppsq\u0000~\u0000\u0000\u0002\u00f9\u0010\u00ceppsq\u0000~\u0000\u0000\u0001\u00fb`\u0084ppsr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv.grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000\fcontentModelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003\u0000\u00fd\u00b0:pp\u0000sq\u0000~\u0000\b\u0000\u00fd\u00b0/pp\u0000sr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001\u0000\u00fd\u00b0$ppsr\u0000 com.sun.msv.grammar.OneOrMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0002xq\u0000~\u0000\u0003\u0000\u00fd\u00b0\u0019sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClassq\u0000~\u0000\txq\u0000~\u0000\u0003\u0000\u00fd\u00b0\u0016q\u0000~\u0000\u0013psr\u00002com.sun.msv.grammar.Expression$AnyStringExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\bsq\u0000~\u0000\u0012\u0001psr\u0000 com.sun.msv.grammar.AnyNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\tq\u0000~\u0000\u0018psr\u0000#com.sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012Ljava/lang/String;L\u0000\fnamespaceURIq\u0000~\u0000\u001fxq\u0000~\u0000\u001at\u0000,org.apache.jorphan.tomcat.manager.ThreadInfot\u0000+http://java.sun.com/jaxb/xjc/dummy-elementssq\u0000~\u0000\u001et\u0000\nthreadInfot\u0000\u0000sq\u0000~\u0000\r\u0000\u00fd\u00b0Eppsq\u0000~\u0000\b\u0000\u00fd\u00b0:q\u0000~\u0000\u0013p\u0000sq\u0000~\u0000\b\u0000\u00fd\u00b0/pp\u0000sq\u0000~\u0000\r\u0000\u00fd\u00b0$ppsq\u0000~\u0000\u000f\u0000\u00fd\u00b0\u0019q\u0000~\u0000\u0013psq\u0000~\u0000\u0014\u0000\u00fd\u00b0\u0016q\u0000~\u0000\u0013pq\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u0000-org.apache.jorphan.tomcat.manager.RequestInfoq\u0000~\u0000\"sq\u0000~\u0000\u001et\u0000\u000brequestInfoq\u0000~\u0000%q\u0000~\u0000\u001dsq\u0000~\u0000\r\u0000\u00fd\u00b0Eppsq\u0000~\u0000\b\u0000\u00fd\u00b0:q\u0000~\u0000\u0013p\u0000sq\u0000~\u0000\b\u0000\u00fd\u00b0/pp\u0000sq\u0000~\u0000\r\u0000\u00fd\u00b0$ppsq\u0000~\u0000\u000f\u0000\u00fd\u00b0\u0019q\u0000~\u0000\u0013psq\u0000~\u0000\u0014\u0000\u00fd\u00b0\u0016q\u0000~\u0000\u0013pq\u0000~\u0000\u0017q\u0000~\u0000\u001bq\u0000~\u0000\u001dsq\u0000~\u0000\u001et\u0000)org.apache.jorphan.tomcat.manager.Workersq\u0000~\u0000\"sq\u0000~\u0000\u001et\u0000\u0007workersq\u0000~\u0000%q\u0000~\u0000\u001dsq\u0000~\u0000\u0014\u0003asbppsr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0003\u0001\u00e22\u00c5ppsr\u0000)com.sun.msv.datatype.xsd.EnumerationFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000fLjava/util/Set;xr\u00009com.sun.msv.datatype.xsd.DataTypeWithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacetFixedZ\u0000\u0012needValueCheckFlagL\u0000\bbaseTypet\u0000)Lcom/sun/msv/datatype/xsd/XSDatatypeImpl;L\u0000\fconcreteTypet\u0000\'Lcom/sun/msv/datatype/xsd/ConcreteType;L\u0000\tfacetNameq\u0000~\u0000\u001fxr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUriq\u0000~\u0000\u001fL\u0000\btypeNameq\u0000~\u0000\u001fL\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpq\u0000~\u0000%psr\u0000.com.sun.msv.datatype.xsd.WhiteSpaceProcessor$2\u0087z9\u00ee\u00f8,N\u0005\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0000\u0000sr\u0000$com.sun.msv.datatype.xsd.NmtokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\"com.sun.msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000Et\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0007NMTOKENq\u0000~\u0000J\u0000q\u0000~\u0000Pt\u0000\u000benumerationsr\u0000\u0011java.util.HashSet\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0002t\u0000\u0006jk8009t\u0000\thttp-8080xsr\u00000com.sun.msv.grammar.Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\nppsr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u001fL\u0000\fnamespaceURIq\u0000~\u0000\u001fxpt\u0000\u000fNMTOKEN-derivedq\u0000~\u0000%sq\u0000~\u0000\u001et\u0000\u0004nameq\u0000~\u0000%sr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0002\u0000\u0004I\u0000\u0005countI\u0000\tthresholdL\u0000\u0006parentq\u0000~\u0000`[\u0000\u0005tablet\u0000![Lcom/sun/msv/grammar/Expression;xp\u0000\u0000\u0000\u000b\u0000\u0000\u00009pur\u0000![Lcom.sun.msv.grammar.Expression;\u00d68D\u00c3]\u00ad\u00a7\n\u0002\u0000\u0000xp\u0000\u0000\u0000\u00bfq\u0000~\u0000\u0005ppppppppppppppppppppppppppppppq\u0000~\u0000\u0006pppppppppppppppppppppppppppppppppppppppppppppppq\u0000~\u0000\u0007ppppppppppppppq\u0000~\u0000\u0011q\u0000~\u0000*q\u0000~\u00004ppppppppq\u0000~\u0000\u000eq\u0000~\u0000)q\u0000~\u00003ppppppppppppppppppppppppppppppq\u0000~\u0000&q\u0000~\u00000ppppppppppppppppppppppppppppppppppppppppppppppppppp");

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return org.apache.jorphan.tomcat.manager.Connector.class;
    }

    public org.apache.jorphan.tomcat.manager.ThreadInfo getThreadInfo() {
        return _ThreadInfo;
    }

    public void setThreadInfo(org.apache.jorphan.tomcat.manager.ThreadInfo value) {
        _ThreadInfo = value;
    }

    public org.apache.jorphan.tomcat.manager.RequestInfo getRequestInfo() {
        return _RequestInfo;
    }

    public void setRequestInfo(org.apache.jorphan.tomcat.manager.RequestInfo value) {
        _RequestInfo = value;
    }

    public org.apache.jorphan.tomcat.manager.Workers getWorkers() {
        return _Workers;
    }

    public void setWorkers(org.apache.jorphan.tomcat.manager.Workers value) {
        _Workers = value;
    }

    public java.lang.String getName() {
        return _Name;
    }

    public void setName(java.lang.String value) {
        _Name = value;
    }

    public com.sun.xml.bind.unmarshaller.ContentHandlerEx getUnmarshaller(com.sun.xml.bind.unmarshaller.UnmarshallingContext context) {
        return new org.apache.jorphan.tomcat.manager.impl.ConnectorImpl.Unmarshaller(context);
    }

    public java.lang.Class getPrimaryInterfaceClass() {
        return PRIMARY_INTERFACE_CLASS();
    }

    public void serializeElements(com.sun.xml.bind.serializer.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        if (_ThreadInfo instanceof javax.xml.bind.Element) {
            context.childAsElements(((com.sun.xml.bind.serializer.XMLSerializable) _ThreadInfo));
        } else {
            context.startElement("", "threadInfo");
            context.childAsAttributes(((com.sun.xml.bind.serializer.XMLSerializable) _ThreadInfo));
            context.endAttributes();
            context.childAsElements(((com.sun.xml.bind.serializer.XMLSerializable) _ThreadInfo));
            context.endElement();
        }
        if (_RequestInfo!= null) {
            if (_RequestInfo instanceof javax.xml.bind.Element) {
                context.childAsElements(((com.sun.xml.bind.serializer.XMLSerializable) _RequestInfo));
            } else {
                context.startElement("", "requestInfo");
                context.childAsAttributes(((com.sun.xml.bind.serializer.XMLSerializable) _RequestInfo));
                context.endAttributes();
                context.childAsElements(((com.sun.xml.bind.serializer.XMLSerializable) _RequestInfo));
                context.endElement();
            }
        }
        if (_Workers!= null) {
            if (_Workers instanceof javax.xml.bind.Element) {
                context.childAsElements(((com.sun.xml.bind.serializer.XMLSerializable) _Workers));
            } else {
                context.startElement("", "workers");
                context.childAsAttributes(((com.sun.xml.bind.serializer.XMLSerializable) _Workers));
                context.endAttributes();
                context.childAsElements(((com.sun.xml.bind.serializer.XMLSerializable) _Workers));
                context.endElement();
            }
        }
    }

    public void serializeAttributes(com.sun.xml.bind.serializer.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        context.startAttribute("", "name");
        try {
            context.text(((java.lang.String) _Name));
        } catch (java.lang.Exception e) {
            com.sun.xml.bind.marshaller.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
    }

    public void serializeAttributeBodies(com.sun.xml.bind.serializer.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
    }

    public java.lang.Class getPrimaryInterface() {
        return (org.apache.jorphan.tomcat.manager.Connector.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends com.sun.xml.bind.unmarshaller.ContentHandlerEx
    {


        public Unmarshaller(com.sun.xml.bind.unmarshaller.UnmarshallingContext context) {
            super(context, "----------");
        }

        protected com.sun.xml.bind.unmarshaller.UnmarshallableObject owner() {
            return org.apache.jorphan.tomcat.manager.impl.ConnectorImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, org.xml.sax.Attributes __atts)
            throws com.sun.xml.bind.unmarshaller.UnreportedException
        {
            switch (state) {
                case  0 :
                    if (("" == ___uri)&&("threadInfo" == ___local)) {
                        context.pushAttributes(__atts);
                        goto1();
                        return ;
                    }
                    break;
                case  4 :
                    if (("" == ___uri)&&("worker" == ___local)) {
                        _Workers = ((org.apache.jorphan.tomcat.manager.impl.WorkersImpl) spawnChildFromEnterElement((org.apache.jorphan.tomcat.manager.impl.WorkersImpl.class), 5, ___uri, ___local, __atts));
                        return ;
                    }
                    break;
                case  3 :
                    if (("" == ___uri)&&("requestInfo" == ___local)) {
                        context.pushAttributes(__atts);
                        goto6();
                        return ;
                    }
                    if (("" == ___uri)&&("workers" == ___local)) {
                        context.pushAttributes(__atts);
                        state = 4;
                        return ;
                    }
                    revertToParentFromEnterElement(___uri, ___local, __atts);
                    return ;
            }
            super.enterElement(___uri, ___local, __atts);
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local)
            throws com.sun.xml.bind.unmarshaller.UnreportedException
        {
            switch (state) {
                case  2 :
                    if (("" == ___uri)&&("threadInfo" == ___local)) {
                        context.popAttributes();
                        state = 3;
                        return ;
                    }
                    break;
                case  5 :
                    if (("" == ___uri)&&("workers" == ___local)) {
                        context.popAttributes();
                        state = 3;
                        return ;
                    }
                    break;
                case  7 :
                    if (("" == ___uri)&&("requestInfo" == ___local)) {
                        context.popAttributes();
                        state = 3;
                        return ;
                    }
                    break;
                case  3 :
                    revertToParentFromLeaveElement(___uri, ___local);
                    return ;
            }
            super.leaveElement(___uri, ___local);
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local)
            throws com.sun.xml.bind.unmarshaller.UnreportedException
        {
            switch (state) {
                case  1 :
                    if (("" == ___uri)&&("maxSpareThreads" == ___local)) {
                        _ThreadInfo = ((org.apache.jorphan.tomcat.manager.impl.ThreadInfoImpl) spawnChildFromEnterAttribute((org.apache.jorphan.tomcat.manager.impl.ThreadInfoImpl.class), 2, ___uri, ___local));
                        return ;
                    }
                    if (("" == ___uri)&&("minSpareThreads" == ___local)) {
                        _ThreadInfo = ((org.apache.jorphan.tomcat.manager.impl.ThreadInfoImpl) spawnChildFromEnterAttribute((org.apache.jorphan.tomcat.manager.impl.ThreadInfoImpl.class), 2, ___uri, ___local));
                        return ;
                    }
                    if (("" == ___uri)&&("currentThreadsBusy" == ___local)) {
                        _ThreadInfo = ((org.apache.jorphan.tomcat.manager.impl.ThreadInfoImpl) spawnChildFromEnterAttribute((org.apache.jorphan.tomcat.manager.impl.ThreadInfoImpl.class), 2, ___uri, ___local));
                        return ;
                    }
                    if (("" == ___uri)&&("currentThreadCount" == ___local)) {
                        _ThreadInfo = ((org.apache.jorphan.tomcat.manager.impl.ThreadInfoImpl) spawnChildFromEnterAttribute((org.apache.jorphan.tomcat.manager.impl.ThreadInfoImpl.class), 2, ___uri, ___local));
                        return ;
                    }
                    if (("" == ___uri)&&("maxThreads" == ___local)) {
                        _ThreadInfo = ((org.apache.jorphan.tomcat.manager.impl.ThreadInfoImpl) spawnChildFromEnterAttribute((org.apache.jorphan.tomcat.manager.impl.ThreadInfoImpl.class), 2, ___uri, ___local));
                        return ;
                    }
                    break;
                case  0 :
                    if (("" == ___uri)&&("name" == ___local)) {
                        state = 8;
                        return ;
                    }
                    break;
                case  6 :
                    if (("" == ___uri)&&("processingTime" == ___local)) {
                        _RequestInfo = ((org.apache.jorphan.tomcat.manager.impl.RequestInfoImpl) spawnChildFromEnterAttribute((org.apache.jorphan.tomcat.manager.impl.RequestInfoImpl.class), 7, ___uri, ___local));
                        return ;
                    }
                    if (("" == ___uri)&&("bytesSent" == ___local)) {
                        _RequestInfo = ((org.apache.jorphan.tomcat.manager.impl.RequestInfoImpl) spawnChildFromEnterAttribute((org.apache.jorphan.tomcat.manager.impl.RequestInfoImpl.class), 7, ___uri, ___local));
                        return ;
                    }
                    if (("" == ___uri)&&("requestCount" == ___local)) {
                        _RequestInfo = ((org.apache.jorphan.tomcat.manager.impl.RequestInfoImpl) spawnChildFromEnterAttribute((org.apache.jorphan.tomcat.manager.impl.RequestInfoImpl.class), 7, ___uri, ___local));
                        return ;
                    }
                    if (("" == ___uri)&&("errorCount" == ___local)) {
                        _RequestInfo = ((org.apache.jorphan.tomcat.manager.impl.RequestInfoImpl) spawnChildFromEnterAttribute((org.apache.jorphan.tomcat.manager.impl.RequestInfoImpl.class), 7, ___uri, ___local));
                        return ;
                    }
                    if (("" == ___uri)&&("maxTime" == ___local)) {
                        _RequestInfo = ((org.apache.jorphan.tomcat.manager.impl.RequestInfoImpl) spawnChildFromEnterAttribute((org.apache.jorphan.tomcat.manager.impl.RequestInfoImpl.class), 7, ___uri, ___local));
                        return ;
                    }
                    if (("" == ___uri)&&("bytesReceived" == ___local)) {
                        _RequestInfo = ((org.apache.jorphan.tomcat.manager.impl.RequestInfoImpl) spawnChildFromEnterAttribute((org.apache.jorphan.tomcat.manager.impl.RequestInfoImpl.class), 7, ___uri, ___local));
                        return ;
                    }
                    break;
                case  3 :
                    revertToParentFromEnterAttribute(___uri, ___local);
                    return ;
            }
            super.enterAttribute(___uri, ___local);
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local)
            throws com.sun.xml.bind.unmarshaller.UnreportedException
        {
            switch (state) {
                case  9 :
                    if (("" == ___uri)&&("name" == ___local)) {
                        goto0();
                        return ;
                    }
                    break;
                case  3 :
                    revertToParentFromLeaveAttribute(___uri, ___local);
                    return ;
            }
            super.leaveAttribute(___uri, ___local);
        }

        public void text(java.lang.String value)
            throws com.sun.xml.bind.unmarshaller.UnreportedException
        {
            try {
                switch (state) {
                    case  8 :
                        try {
                            _Name = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
                        } catch (java.lang.Exception e) {
                            handleParseConversionException(e);
                        }
                        state = 9;
                        return ;
                    case  3 :
                        revertToParentFromText(value);
                        return ;
                }
            } catch (java.lang.RuntimeException e) {
                handleUnexpectedTextException(value, e);
            }
        }

        public void leaveChild(int nextState)
            throws com.sun.xml.bind.unmarshaller.UnreportedException
        {
            switch (nextState) {
                case  2 :
                    state = 2;
                    return ;
                case  5 :
                    state = 5;
                    return ;
                case  7 :
                    state = 7;
                    return ;
            }
            super.leaveChild(nextState);
        }

        private void goto1()
            throws com.sun.xml.bind.unmarshaller.UnreportedException
        {
            int idx;
            state = 1;
            idx = context.getAttribute("", "minSpareThreads");
            if (idx >= 0) {
                context.consumeAttribute(idx);
                return ;
            }
            idx = context.getAttribute("", "currentThreadCount");
            if (idx >= 0) {
                context.consumeAttribute(idx);
                return ;
            }
            idx = context.getAttribute("", "maxThreads");
            if (idx >= 0) {
                context.consumeAttribute(idx);
                return ;
            }
            idx = context.getAttribute("", "currentThreadsBusy");
            if (idx >= 0) {
                context.consumeAttribute(idx);
                return ;
            }
            idx = context.getAttribute("", "maxSpareThreads");
            if (idx >= 0) {
                context.consumeAttribute(idx);
                return ;
            }
        }

        private void goto0()
            throws com.sun.xml.bind.unmarshaller.UnreportedException
        {
            int idx;
            state = 0;
            idx = context.getAttribute("", "name");
            if (idx >= 0) {
                context.consumeAttribute(idx);
                return ;
            }
        }

        private void goto6()
            throws com.sun.xml.bind.unmarshaller.UnreportedException
        {
            int idx;
            state = 6;
            idx = context.getAttribute("", "errorCount");
            if (idx >= 0) {
                context.consumeAttribute(idx);
                return ;
            }
            idx = context.getAttribute("", "processingTime");
            if (idx >= 0) {
                context.consumeAttribute(idx);
                return ;
            }
            idx = context.getAttribute("", "requestCount");
            if (idx >= 0) {
                context.consumeAttribute(idx);
                return ;
            }
            idx = context.getAttribute("", "bytesSent");
            if (idx >= 0) {
                context.consumeAttribute(idx);
                return ;
            }
            idx = context.getAttribute("", "maxTime");
            if (idx >= 0) {
                context.consumeAttribute(idx);
                return ;
            }
            idx = context.getAttribute("", "bytesReceived");
            if (idx >= 0) {
                context.consumeAttribute(idx);
                return ;
            }
        }

    }

}
