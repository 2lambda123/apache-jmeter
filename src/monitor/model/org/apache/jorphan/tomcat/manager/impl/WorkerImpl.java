//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2004.03.03 at 07:33:19 GMT-05:00 
//


package org.apache.jorphan.tomcat.manager.impl;

public class WorkerImpl implements org.apache.jorphan.tomcat.manager.Worker, com.sun.xml.bind.unmarshaller.UnmarshallableObject, com.sun.xml.bind.serializer.XMLSerializable, com.sun.xml.bind.validator.ValidatableObject
{

    protected boolean has_RequestProcessingTime;
    protected int _RequestProcessingTime;
    protected boolean has_RequestBytesSent;
    protected long _RequestBytesSent;
    protected java.lang.String _CurrentQueryString;
    protected java.lang.String _RemoteAddr;
    protected java.lang.String _CurrentUri;
    protected java.lang.String _Stage;
    protected java.lang.String _VirtualHost;
    protected java.lang.String _Protocol;
    protected boolean has_RequestBytesReceived;
    protected long _RequestBytesReceived;
    protected java.lang.String _Method;
    private final static com.sun.msv.grammar.Grammar schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize("\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/grammar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0003I\u0000\u000ecachedHashCodeL\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0002xp\u000b\u00c7=\u0093ppsq\u0000~\u0000\u0000\u000b\r\b\u00eeppsq\u0000~\u0000\u0000\nf\u00cd\u000bppsq\u0000~\u0000\u0000\tbPkppsq\u0000~\u0000\u0000\b,A\u00f2ppsq\u0000~\u0000\u0000\u000644\u00e2ppsq\u0000~\u0000\u0000\u0004\u000bWkppsq\u0000~\u0000\u0000\u0001\u00a0\u00be(ppsq\u0000~\u0000\u0000\u0001$\u00c2\u00a5ppsr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xq\u0000~\u0000\u0003\u0000~\u000b\bppsr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0003\u0000]\u00ce\u00d6ppsr\u0000!com.sun.msv.datatype.xsd.LongType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000+com.sun.msv.datatype.xsd.IntegerDerivedType\u0099\u00f1]\u0090&6k\u00be\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000\u0012Ljava/lang/String;L\u0000\btypeNameq\u0000~\u0000\u001aL\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0004longsr\u0000.com.sun.msv.datatype.xsd.WhiteSpaceProcessor$2\u0087z9\u00ee\u00f8,N\u0005\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\nppsr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u001aL\u0000\fnamespaceURIq\u0000~\u0000\u001axpq\u0000~\u0000\u001eq\u0000~\u0000\u001dsr\u0000#com.sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u001aL\u0000\fnamespaceURIq\u0000~\u0000\u001axr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000\u0010requestBytesSentt\u0000\u0000sq\u0000~\u0000\u000e\u0000\u00a6\u00b7\u0098ppsq\u0000~\u0000\u0011\u0000V\u00f6Appsr\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxq\u0000~\u0000\u0017q\u0000~\u0000\u001dt\u0000\u0006stringsr\u0000.com.sun.msv.datatype.xsd.WhiteSpaceProcessor$1\u0013JMoI\u00db\u00a4G\u0002\u0000\u0000xq\u0000~\u0000 \u0001q\u0000~\u0000#sq\u0000~\u0000$q\u0000~\u0000/q\u0000~\u0000\u001dsq\u0000~\u0000&t\u0000\u0005stageq\u0000~\u0000*sq\u0000~\u0000\u000e\u0000{\u00fb~ppq\u0000~\u0000\u0014sq\u0000~\u0000&t\u0000\u0014requestBytesReceivedq\u0000~\u0000*sq\u0000~\u0000\u000e\u0002j\u0099>ppsq\u0000~\u0000\u0011\u0001d\u00db\u00e5ppsr\u0000 com.sun.msv.datatype.xsd.IntType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0016q\u0000~\u0000\u001dt\u0000\u0003intq\u0000~\u0000!q\u0000~\u0000#sq\u0000~\u0000$q\u0000~\u0000<q\u0000~\u0000\u001dsq\u0000~\u0000&t\u0000\u0015requestProcessingTimeq\u0000~\u0000*sq\u0000~\u0000\u000e\u0002(\u00ddrppq\u0000~\u0000,sq\u0000~\u0000&t\u0000\u0012currentQueryStringq\u0000~\u0000*sq\u0000~\u0000\u000e\u0001\u00f8\r\u000bppq\u0000~\u0000,sq\u0000~\u0000&t\u0000\u000bvirtualHostq\u0000~\u0000*sq\u0000~\u0000\u000e\u00016\u000etppq\u0000~\u0000,sq\u0000~\u0000&t\u0000\bprotocolq\u0000~\u0000*sq\u0000~\u0000\u000e\u0001\u0004|\u009bppq\u0000~\u0000,sq\u0000~\u0000&t\u0000\ncurrentUriq\u0000~\u0000*sq\u0000~\u0000\u000e\u0000\u00a6;\u00deppq\u0000~\u0000,sq\u0000~\u0000&t\u0000\u0006methodq\u0000~\u0000*sq\u0000~\u0000\u000e\u0000\u00ba4\u00a0ppq\u0000~\u0000,sq\u0000~\u0000&t\u0000\nremoteAddrq\u0000~\u0000*sr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0002\u0000\u0004I\u0000\u0005countI\u0000\tthresholdL\u0000\u0006parentq\u0000~\u0000S[\u0000\u0005tablet\u0000![Lcom/sun/msv/grammar/Expression;xp\u0000\u0000\u0000\t\u0000\u0000\u00009pur\u0000![Lcom.sun.msv.grammar.Expression;\u00d68D\u00c3]\u00ad\u00a7\n\u0002\u0000\u0000xp\u0000\u0000\u0000\u00bfppppppq\u0000~\u0000\bppq\u0000~\u0000\rppppppppppq\u0000~\u0000\npppppppppppppppppppppppppppppppppppppq\u0000~\u0000\tpppppppppppppq\u0000~\u0000\u0007ppppppppppppppppppppppppppppppppppppppppq\u0000~\u0000\u0005pppppppq\u0000~\u0000\u0006pppppppppppppppppppppppppppppppq\u0000~\u0000\u000bppppppppppppppppppppppppppppppq\u0000~\u0000\fpppppp");

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return org.apache.jorphan.tomcat.manager.Worker.class;
    }

    public int getRequestProcessingTime() {
        return _RequestProcessingTime;
    }

    public void setRequestProcessingTime(int value) {
        _RequestProcessingTime = value;
        has_RequestProcessingTime = true;
    }

    public long getRequestBytesSent() {
        return _RequestBytesSent;
    }

    public void setRequestBytesSent(long value) {
        _RequestBytesSent = value;
        has_RequestBytesSent = true;
    }

    public java.lang.String getCurrentQueryString() {
        return _CurrentQueryString;
    }

    public void setCurrentQueryString(java.lang.String value) {
        _CurrentQueryString = value;
    }

    public java.lang.String getRemoteAddr() {
        return _RemoteAddr;
    }

    public void setRemoteAddr(java.lang.String value) {
        _RemoteAddr = value;
    }

    public java.lang.String getCurrentUri() {
        return _CurrentUri;
    }

    public void setCurrentUri(java.lang.String value) {
        _CurrentUri = value;
    }

    public java.lang.String getStage() {
        return _Stage;
    }

    public void setStage(java.lang.String value) {
        _Stage = value;
    }

    public java.lang.String getVirtualHost() {
        return _VirtualHost;
    }

    public void setVirtualHost(java.lang.String value) {
        _VirtualHost = value;
    }

    public java.lang.String getProtocol() {
        return _Protocol;
    }

    public void setProtocol(java.lang.String value) {
        _Protocol = value;
    }

    public long getRequestBytesReceived() {
        return _RequestBytesReceived;
    }

    public void setRequestBytesReceived(long value) {
        _RequestBytesReceived = value;
        has_RequestBytesReceived = true;
    }

    public java.lang.String getMethod() {
        return _Method;
    }

    public void setMethod(java.lang.String value) {
        _Method = value;
    }

    public com.sun.xml.bind.unmarshaller.ContentHandlerEx getUnmarshaller(com.sun.xml.bind.unmarshaller.UnmarshallingContext context) {
        return new org.apache.jorphan.tomcat.manager.impl.WorkerImpl.Unmarshaller(context);
    }

    public java.lang.Class getPrimaryInterfaceClass() {
        return PRIMARY_INTERFACE_CLASS();
    }

    public void serializeElements(com.sun.xml.bind.serializer.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
    }

    public void serializeAttributes(com.sun.xml.bind.serializer.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        context.startAttribute("", "requestBytesSent");
        try {
            context.text(javax.xml.bind.DatatypeConverter.printLong(((long) _RequestBytesSent)));
        } catch (java.lang.Exception e) {
            com.sun.xml.bind.marshaller.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        context.startAttribute("", "stage");
        try {
            context.text(((java.lang.String) _Stage));
        } catch (java.lang.Exception e) {
            com.sun.xml.bind.marshaller.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        context.startAttribute("", "requestBytesReceived");
        try {
            context.text(javax.xml.bind.DatatypeConverter.printLong(((long) _RequestBytesReceived)));
        } catch (java.lang.Exception e) {
            com.sun.xml.bind.marshaller.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        context.startAttribute("", "requestProcessingTime");
        try {
            context.text(javax.xml.bind.DatatypeConverter.printInt(((int) _RequestProcessingTime)));
        } catch (java.lang.Exception e) {
            com.sun.xml.bind.marshaller.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        context.startAttribute("", "currentQueryString");
        try {
            context.text(((java.lang.String) _CurrentQueryString));
        } catch (java.lang.Exception e) {
            com.sun.xml.bind.marshaller.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        context.startAttribute("", "virtualHost");
        try {
            context.text(((java.lang.String) _VirtualHost));
        } catch (java.lang.Exception e) {
            com.sun.xml.bind.marshaller.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        context.startAttribute("", "protocol");
        try {
            context.text(((java.lang.String) _Protocol));
        } catch (java.lang.Exception e) {
            com.sun.xml.bind.marshaller.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        context.startAttribute("", "currentUri");
        try {
            context.text(((java.lang.String) _CurrentUri));
        } catch (java.lang.Exception e) {
            com.sun.xml.bind.marshaller.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        context.startAttribute("", "method");
        try {
            context.text(((java.lang.String) _Method));
        } catch (java.lang.Exception e) {
            com.sun.xml.bind.marshaller.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        context.startAttribute("", "remoteAddr");
        try {
            context.text(((java.lang.String) _RemoteAddr));
        } catch (java.lang.Exception e) {
            com.sun.xml.bind.marshaller.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
    }

    public void serializeAttributeBodies(com.sun.xml.bind.serializer.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
    }

    public java.lang.Class getPrimaryInterface() {
        return (org.apache.jorphan.tomcat.manager.Worker.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends com.sun.xml.bind.unmarshaller.ContentHandlerEx
    {


        public Unmarshaller(com.sun.xml.bind.unmarshaller.UnmarshallingContext context) {
            super(context, "---------------------");
        }

        protected com.sun.xml.bind.unmarshaller.UnmarshallableObject owner() {
            return org.apache.jorphan.tomcat.manager.impl.WorkerImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, org.xml.sax.Attributes __atts)
            throws com.sun.xml.bind.unmarshaller.UnreportedException
        {
            switch (state) {
                case  0 :
                    revertToParentFromEnterElement(___uri, ___local, __atts);
                    return ;
            }
            super.enterElement(___uri, ___local, __atts);
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local)
            throws com.sun.xml.bind.unmarshaller.UnreportedException
        {
            switch (state) {
                case  0 :
                    revertToParentFromLeaveElement(___uri, ___local);
                    return ;
            }
            super.leaveElement(___uri, ___local);
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local)
            throws com.sun.xml.bind.unmarshaller.UnreportedException
        {
            switch (state) {
                case  0 :
                    if (("" == ___uri)&&("stage" == ___local)) {
                        state = 11;
                        return ;
                    }
                    if (("" == ___uri)&&("requestBytesSent" == ___local)) {
                        state = 13;
                        return ;
                    }
                    if (("" == ___uri)&&("protocol" == ___local)) {
                        state = 1;
                        return ;
                    }
                    if (("" == ___uri)&&("requestProcessingTime" == ___local)) {
                        state = 9;
                        return ;
                    }
                    if (("" == ___uri)&&("requestBytesReceived" == ___local)) {
                        state = 5;
                        return ;
                    }
                    if (("" == ___uri)&&("currentQueryString" == ___local)) {
                        state = 19;
                        return ;
                    }
                    if (("" == ___uri)&&("method" == ___local)) {
                        state = 3;
                        return ;
                    }
                    if (("" == ___uri)&&("virtualHost" == ___local)) {
                        state = 15;
                        return ;
                    }
                    if (("" == ___uri)&&("remoteAddr" == ___local)) {
                        state = 7;
                        return ;
                    }
                    if (("" == ___uri)&&("currentUri" == ___local)) {
                        state = 17;
                        return ;
                    }
                    revertToParentFromEnterAttribute(___uri, ___local);
                    return ;
            }
            super.enterAttribute(___uri, ___local);
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local)
            throws com.sun.xml.bind.unmarshaller.UnreportedException
        {
            switch (state) {
                case  4 :
                    if (("" == ___uri)&&("method" == ___local)) {
                        goto0();
                        return ;
                    }
                    break;
                case  6 :
                    if (("" == ___uri)&&("requestBytesReceived" == ___local)) {
                        goto0();
                        return ;
                    }
                    break;
                case  8 :
                    if (("" == ___uri)&&("remoteAddr" == ___local)) {
                        goto0();
                        return ;
                    }
                    break;
                case  14 :
                    if (("" == ___uri)&&("requestBytesSent" == ___local)) {
                        goto0();
                        return ;
                    }
                    break;
                case  16 :
                    if (("" == ___uri)&&("virtualHost" == ___local)) {
                        goto0();
                        return ;
                    }
                    break;
                case  18 :
                    if (("" == ___uri)&&("currentUri" == ___local)) {
                        goto0();
                        return ;
                    }
                    break;
                case  2 :
                    if (("" == ___uri)&&("protocol" == ___local)) {
                        goto0();
                        return ;
                    }
                    break;
                case  12 :
                    if (("" == ___uri)&&("stage" == ___local)) {
                        goto0();
                        return ;
                    }
                    break;
                case  0 :
                    revertToParentFromLeaveAttribute(___uri, ___local);
                    return ;
                case  20 :
                    if (("" == ___uri)&&("currentQueryString" == ___local)) {
                        goto0();
                        return ;
                    }
                    break;
                case  10 :
                    if (("" == ___uri)&&("requestProcessingTime" == ___local)) {
                        goto0();
                        return ;
                    }
                    break;
            }
            super.leaveAttribute(___uri, ___local);
        }

        public void text(java.lang.String value)
            throws com.sun.xml.bind.unmarshaller.UnreportedException
        {
            try {
                switch (state) {
                    case  11 :
                        try {
                            _Stage = value;
                        } catch (java.lang.Exception e) {
                            handleParseConversionException(e);
                        }
                        state = 12;
                        return ;
                    case  7 :
                        try {
                            _RemoteAddr = value;
                        } catch (java.lang.Exception e) {
                            handleParseConversionException(e);
                        }
                        state = 8;
                        return ;
                    case  13 :
                        try {
                            _RequestBytesSent = javax.xml.bind.DatatypeConverter.parseLong(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                            has_RequestBytesSent = true;
                        } catch (java.lang.Exception e) {
                            handleParseConversionException(e);
                        }
                        state = 14;
                        return ;
                    case  3 :
                        try {
                            _Method = value;
                        } catch (java.lang.Exception e) {
                            handleParseConversionException(e);
                        }
                        state = 4;
                        return ;
                    case  15 :
                        try {
                            _VirtualHost = value;
                        } catch (java.lang.Exception e) {
                            handleParseConversionException(e);
                        }
                        state = 16;
                        return ;
                    case  9 :
                        try {
                            _RequestProcessingTime = javax.xml.bind.DatatypeConverter.parseInt(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                            has_RequestProcessingTime = true;
                        } catch (java.lang.Exception e) {
                            handleParseConversionException(e);
                        }
                        state = 10;
                        return ;
                    case  0 :
                        revertToParentFromText(value);
                        return ;
                    case  17 :
                        try {
                            _CurrentUri = value;
                        } catch (java.lang.Exception e) {
                            handleParseConversionException(e);
                        }
                        state = 18;
                        return ;
                    case  1 :
                        try {
                            _Protocol = value;
                        } catch (java.lang.Exception e) {
                            handleParseConversionException(e);
                        }
                        state = 2;
                        return ;
                    case  5 :
                        try {
                            _RequestBytesReceived = javax.xml.bind.DatatypeConverter.parseLong(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                            has_RequestBytesReceived = true;
                        } catch (java.lang.Exception e) {
                            handleParseConversionException(e);
                        }
                        state = 6;
                        return ;
                    case  19 :
                        try {
                            _CurrentQueryString = value;
                        } catch (java.lang.Exception e) {
                            handleParseConversionException(e);
                        }
                        state = 20;
                        return ;
                }
            } catch (java.lang.RuntimeException e) {
                handleUnexpectedTextException(value, e);
            }
        }

        private void goto0()
            throws com.sun.xml.bind.unmarshaller.UnreportedException
        {
            int idx;
            state = 0;
            idx = context.getAttribute("", "requestBytesSent");
            if (idx >= 0) {
                context.consumeAttribute(idx);
                return ;
            }
            idx = context.getAttribute("", "stage");
            if (idx >= 0) {
                context.consumeAttribute(idx);
                return ;
            }
            idx = context.getAttribute("", "requestBytesReceived");
            if (idx >= 0) {
                context.consumeAttribute(idx);
                return ;
            }
            idx = context.getAttribute("", "requestProcessingTime");
            if (idx >= 0) {
                context.consumeAttribute(idx);
                return ;
            }
            idx = context.getAttribute("", "currentQueryString");
            if (idx >= 0) {
                context.consumeAttribute(idx);
                return ;
            }
            idx = context.getAttribute("", "virtualHost");
            if (idx >= 0) {
                context.consumeAttribute(idx);
                return ;
            }
            idx = context.getAttribute("", "protocol");
            if (idx >= 0) {
                context.consumeAttribute(idx);
                return ;
            }
            idx = context.getAttribute("", "currentUri");
            if (idx >= 0) {
                context.consumeAttribute(idx);
                return ;
            }
            idx = context.getAttribute("", "method");
            if (idx >= 0) {
                context.consumeAttribute(idx);
                return ;
            }
            idx = context.getAttribute("", "remoteAddr");
            if (idx >= 0) {
                context.consumeAttribute(idx);
                return ;
            }
        }

    }

}
