<?xml version="1.0"?>
<document>
  <properties>
    <author email="bburns@apache.org">Brendan Burns, et al.</author>
    <title>Installing JMeter</title>
  </properties>
<body>
<section name="requirements">
<a NAME="requirements"></a>
<blockquote>
  <ul>
    <li><b>Java Environment</b><br/>
      A fully compliant Java 1.2 environment is required for Apache JMeter to execute. (hopefully this will be changed back to 1.1 in the final release) Since
      Apache JMeter uses only standard Java APIs (java.*), please, do not file in a bug report
      if your JRE fails to execute Apache JMeter because a class implementation is missing, or
      not fully compliant.</li>
    <li><b>Java JFC</b> (Swing components)<br/>
      Swing GUI extentions are required for Apache JMeter. Due to incompatibility in the package
      names, the precompiled version works only with Swing placed under the package <b>javax.swing</b>
      which is its final destination found in the Java 2(tm) platform. </li>
    <li><b>Java Compiler</b> [optional]<br/>
      A Java compiler is not needed since the distribution includes a precompiled java binary
      archive. Note that a compiler is required if you plan to recompile the source code or if
      you plan to build your own plugins.</li>
   <li><b>SAX 1.0 XML Parser</b> [optional]<br/>
   The SAX 1.0 libraries and a  SAX compliant parser are necassary for
   restoring of saved HTTPSamples and to compile Apache JMeter.  In the spirit
   of solidarity we recomend Apache's own
   <a href="http://xml.apache.org">Xerces</a> parser.</li>
   <li>
     <a href="http://www.javasoft.com/products/javamail">
     <b>Java Mail<sup><font size="-2">tm</font></sup></b></a> &amp;
     <a href="http://www.javasoft.com/beans/glasgow/jaf.html">
      <b>javax.activation</b>
     </a>
     [optional]<br/>
   The javax.mail &amp; javax.activation packages are required to use the
   MailVisualizer and to compile Apache JMeter. </li>
	<li><b>JSSE</b> [optional]<BR/>
		JSSE is used to provide an SSL implementation to enable testing of https protocol.</li>
  </ul>
</blockquote>

<h2><a NAME="installing"></a>Installing Apache JMeter</h2>

<blockquote>
  <p>If your system meets the above requirements, thanks to the beauty of Java you don't
  have to do anything else: under the directory <tt>/bin </tt>you will find the binary
  application and the system wrappers you need to run Apache JMeter. You may want to go the <a HREF="running.html">running instructions</a> to continue. </p>
  <p>If the precompiled binary doesn't match your system (Swing package incompatibility) or
  you simply want to recompile the source code, you may use the makefile that matches your
  operating system under the directory <tt>/src</tt> or do it by hand. </p>
  <h3>Using ant</h3>
  <blockquote>
    <p>JMeter has been configured to use the ant makefile replacement from the
    <a href="jakarta.apache.org">jakarta project</a>. To build with ant:
    <ul>
      <li>move to the base of the jmeter distribution</li>
      <li>run <code>ant install</code></li>
    </ul>
  </p>
  </blockquote>
  <h3>Using makefiles</h3>
  <blockquote>
    <p>Under both UNIX and Windows systems, building Apache JMeter is very simple: <ul>
      <li>move your current directory to <tt>/src</tt></li>
      <li>type <tt>make</tt></li>
    </ul>
    </p>
    <p>Since those makefiles assume you have both <tt>javac</tt> and <tt>javadoc</tt>
    installed in your path, if this is not the case or you simply want to use other tools, you
    have to edit those files by hand and follow internal instructions. </p>
    <p>When the make process is complete, a file named <tt>ApacheJMeter.jar</tt> will be
    placed under the <tt>/bin</tt> directory. You may go to <a HREF="running.html">next
    section</a> to see how to start the application you just built.</p>
  </blockquote>
  <h3>Doing it by hand</h3>
  <blockquote>
    <p>This section assumes knowledge about Java compilers and Java tools, such as <tt>javac</tt>,
    <tt>javadoc</tt> and <tt>jar</tt>. </p>
    <p>First thing you have to do is to compile the source files. To do this, you create a
    temporary directory (say <tt>./src/temp</tt>), more to the /src directory and execute the
    following command (all in one line) </p>
    <blockquote>
      <p><tt>javac -d ./temp ./org/apache/jmeter/timers/*.java
      ./org/apache/jmeter/visualizers/*.java ./org/apache/jmeter/samplers/*.java
      ./org/apache/jmeter/*.java</tt></p>
    </blockquote>
    <p>This should create all the right class files under the <tt>./temp directory.</tt> If
    this doesn't work, check to see if the package <tt>swingall.jar</tt> resides in your
    classpath and if the Swing classes reside under the <tt>com.sun.java.swing</tt>
    directories. </p>
    <p>When your done compiling the classes, you should copy all resources in the right place
    executing </p>
    <blockquote>
      <p><tt>cp ./org/apache/jmeter/images/* ./temp/org/apache/jmeter/images/*<br/>
      cp ./org/apache/jmeter/*.properties ./temp/org/apache/jmeter/*.properties</tt></p>
    </blockquote>
    <p>(of course windows users should change this a little to match system settings). Now you
    are ready to build the jar archive by typing </p>
    <blockquote>
      <p><tt>jar cmf0 ./MANIFEST ../bin/ApacheJMeter.jar ./temp/.</tt></p>
    </blockquote>
    <p><tt>that will create the archive.</tt> </p>
    <p>To create the javadoc documentation simply type this other command </p>
    <blockquote>
      <p><tt>javadoc -d ..\docs\api org.apache.jmeter org.apache.jmeter.timers
      org.apache.jmeter.visualizers org.apache.jmeter.samplers</tt></p>
    </blockquote>
    <p>Now that everything is built, just go on to the <a HREF="running.html">next section</a>
    to see how to run it. </p>
  </blockquote>
</blockquote>
</section>
</body>
</document>
