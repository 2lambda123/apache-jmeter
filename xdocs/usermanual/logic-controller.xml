<?xml version="1.0"?>
<document>

<properties>
  <title>User's Manual: Logic Controllers</title>
</properties>

<body>

<section name="4.2.2 Logic Controllers" anchor="logic_controller">
<p>Logic Controllers let you customize the logic that JMeter uses to
decide when to send requests.  Logic Controllers may have as child elements any
of the following: Generative Controllers (requests), Configuration Elements, and other Logic
Controllers.  Logic Controllers can change the order of requests coming from their
child elements.  They can modify the requests themselves, cause JMeter to repeat
requests, etc.
</p>

<p>To understand the effect of Logic Controllers on a test plan, consider the
following test tree:</p>

<p>
<ul>
<li>Test Plan</li>
	<ul>
	<li>Thread Group</li>
		<ul>
		<li>Once Only Controller</li>
			<ul>
			<li>Login Request (an <a href="component_reference.html#http_request">HTTP Generative Controller</a>)</li>
			</ul>
		<li>Load Search Page (HTTP Generative Controller)</li>
		<li>Interleave Controller</li>
			<ul>
			<li>Search "A" (HTTP Generative Controller)</li>
			<li>Search "B" (HTTP Generative Controller)</li>
			<li>HTTP default request (Configuration Element)</li>
			</ul>
		<li>HTTP default request (Configuration Element)</li>
		<li>Cookie Manager (Configuration Element)</li>
		</ul>
	</ul>
</ul>
</p>

<p>The first thing about this test is that the login request will be executed only
the first time through.  Subsequent iterations will skip it.  This is due to the
effects of the <a href="component_referenct.html#once_only_controller">Once Only Controller</a>.</p>

<p>After the login, the next Generative Controller loads the search page (imagine a
web application where the user logs in, and then goes to a search page to do a search).  This
is just a simple request, not filtered through any Logic Controller.</p>

<p>After loading the search page, we want to do a search.  Actually, we want to do
two different searches.  However, we want to re-load the search page itself between
each search.  We could do this by having 4 simple HTTP request elements (load search,
search "A", load search, search "B").  Instead, we use the <a href="component_reference.html#interleave_controller">Interleave
Controller</a> which passes on one child request each time through the test.  It keeps the
ordering (ie - it doesn't pass one on at random, but "remembers" its place) of its
child elements.  Interleaving 2 child requests may be overkill, but there could easily have
been 8, or 20 child requests.</p>

<p>Note the <a href="component_reference.html#http_default_request">HTTP default request</a> that
belongs to the Interleave Controller.  Imagine that "Search A" and "Search B" share
the same PATH info (an HTTP request specification includes domain, port, method, protocol,
path, and arguments, plus other optional items).  This makes sense - both are search requests,
 hitting the same back-end search engine (a servlet or cgi-script, let's say).  Rather than
 configure both HTTP Generative Controllers with the same information in their PATH field, we
 can abstract that information out to a single Configuration Element.  When the Interleave
 Controller "passes on" requests from "Search A" or "Search B", it will fill in the blanks with
 values from the HTTP default request Configuration Element.  So, we leave the PATH field
 blank for those requests, and put that information into the Configuration Element.  In this
case, this is a minor benefit at best, but it demonstrates the feature.</p>

<p>The next element in the tree is another HTTP default request, this time added to the
Thread Group itself.  The Thread Group has a built-in Logic Controller, and thus, it uses
this Configuration Element exactly as described above.  It fills in the blanks of any
Request that passes through.  It is extremely useful in web testing to leave the DOMAIN
field blank in all your HTTP Generative Controller elements, and instead, put that information
into an HTTP default request element, added to the Thread Group.  By doing so, you can
test your application on a different server simply by changing one field in your Test Plan.
Otherwise, you'd have to edit each and every Generative Controller.</p>

<p>The last element is a <a href="component_reference.html#cookie_manager">Cookie
Manager</a>.  A Cookie Manager should be added to all web tests - otherwise JMeter will
ignore cookies.  By adding it at the Thread Group level, we ensure that all HTTP requests
will share the same cookies.</p>

<p>Logic Controllers can be combined to achieve various results.  See the list of <a href="component_reference.html#logic_controllers">built-in
Logic Controllers</a>.</p>
</section>



</body>
</document>
