<?xml version="1.0"?>
<document>

<properties>
  <title>User's Manual: Thread Group</title>
</properties>

<body>

<section name="4.0 Elements of a Test Plan">

<subsection name="4.1 ThreadGroup" anchor="thread_group">
<p>Thread group elements are the beginning points of any test plan.  All elements
of a test plan must be under a thread group.  As the name implies, the thread group
element controls the number of threads JMeter will use to execute your test.  The
controls for a thread group allow you to:
<ul><li>Set the number of threads</li>
<li>Set the ramp-up period</li>
<li>Set the number of times to execute the test</li>
</ul></p>

<p>Each thread will execute the test plan in its entirety and completely independent
of other test threads.  Multiple threads are used to simulate concurrent connections
to your server application.</p>

<p>The ramp-up period tells JMeter how long to take to "ramp-up" to the full number of
threads chosen.  If 10 threads are used, and the ramp-up period is 100 seconds, then
JMeter will take 100 seconds to get all 10 threads up and running.  Each thread will
start 10 (100/10) seconds after the previous thread was begun.  If there are 30 threads
and a ramp-up period of 120 seconds, then each successive thread will be delayed by 4 seconds.</p>

<p>By default, a thread group is configured to loop indefinitely through its elements.
Alternatively, you can set the number of times the thread group will loop before ending.  If the number
is set at one, then JMeter will execute the test only once before stopping.</p>
</subsection>

<subsection name="4.2 Controllers" anchor="controllers">

<p> JMeter has two types of Controllers: Generative and Logical.</p>

<p>Generative Controllers tell JMeter to send requests to a server. For
example, add an HTTP Request Generative Controller if you want JMeter
to send an HTTP request.  You can also customize a request by adding one
or more Configuration Elements to a Generative Controller.  For more
information, see
<a href="#gen_controller">Generative Controllers</a>.</p>

<p>Logical Controllers let you customize the logic that JMeter uses to
decide when to send requests.  For example, you can add an Interleave
Logic Controller to alternate between two HTTP Request Generative
Controllers.  Also, one particular Logic Controller, the Modification
Manager, lets you modify the results of a request.  For more information,
see <a href="#logic_controller">Logical Controllers</a>.</p>

</subsection>

<subsection name="4.2.1 Generative Controllers" anchor="gen_controller">

<p>Generative Controllers tell JMeter to send requests to a server. JMeter
currently has three such controllers: FTP Request, HTTP Request, and JDBC
request.  Each controller has several properties you can set.  You can further
customize a controller by adding one or more Configuration Elements to it.
Also, note that JMeter sends requests in the order that you add them to the tree.</p>

<p>If you are going to send multiple requests of the same type (for example,
HTTP Request) to the same server, consider using a Defaults Configuration
Element. Each controller has its own Defaults element (see below). </p>

<p>Remember to add a Listener to your Thread Group to view and/or store the
results of your requests to disk.</p>

<p>If you are interested in having JMeter perform basic validation on
the response of your request, add an <a href="assertion.html">Assertion</a> to
the Request controller.  For example, in stress testing a web application, the server
may return a successful "HTTP Response" code, but the page may have errors on it or
may be missing sections. You could add assertions to check for certain HTML tags,
common error strings, and so on. JMeter lets you create these assertions using regular
expressions.</p>

<p><a href="component_reference.html#gen_controllers">JMeter's built-in generative controllers</a></p>
</subsection>

<subsection name="4.2.2 Logic Controllers" anchor="logic_controller">
<p>Logic Controllers let you customize the logic that JMeter uses to
decide when to send requests.  Logic Controllers may have as child elements any
of the following: Generative Controllers (requests), Configuration Elements, and other Logic
Controllers.  Logic Controllers can change the order of requests coming from their
child elements.  They can modify the requests themselves, cause JMeter to repeat
requests, etc.
</p>

<p>To understand the effect of Logic Controllers on a test plan, consider the
following test tree:</p>

<p>
<ul>
<li>Test Plan</li>
	<ul>
	<li>Thread Group</li>
		<ul>
		<li>Once Only Controller</li>
			<ul>
			<li>Login Request (an <a href="component_reference.html#http_request">HTTP Generative Controller</a>)</li>
			</ul>
		<li>Load Search Page (HTTP Generative Controller)</li>
		<li>Interleave Controller</li>
			<ul>
			<li>Search "A" (HTTP Generative Controller)</li>
			<li>Search "B" (HTTP Generative Controller)</li>
			<li>HTTP default request (Configuration Element)</li>
			</ul>
		<li>HTTP default request (Configuration Element)</li>
		<li>Cookie Manager (Configuration Element)</li>
		</ul>
	</ul>
</ul>
</p>

<p>The first thing about this test is that the login request will be executed only
the first time through.  Subsequent iterations will skip it.  This is due to the
effects of the <a href="component_referenct.html#once_only_controller">Once Only Controller</a>.</p>

<p>After the login, the next Generative Controller loads the search page (imagine a
web application where the user logs in, and then goes to a search page to do a search).  This
is just a simple request, not filtered through any Logic Controller.</p>

<p>After loading the search page, we want to do a search.  Actually, we want to do
two different searches.  However, we want to re-load the search page itself between
each search.  We could do this by having 4 simple HTTP request elements (load search,
search "A", load search, search "B").  Instead, we use the <a href="component_reference.html#interleave_controller">Interleave
Controller</a> which passes on one child request each time through the test.  It keeps the
ordering (ie - it doesn't pass one on at random, but "remembers" its place) of its
child elements.  Interleaving 2 child requests may be overkill, but there could easily have
been 8, or 20 child requests.</p>

<p>Note the <a href="component_reference.html#http_default_request">HTTP default request</a> that
belongs to the Interleave Controller.  Imagine that "Search A" and "Search B" share
the same PATH info (an HTTP request specification includes domain, port, method, protocol,
path, and arguments, plus other optional items).  This makes sense - both are search requests,
 hitting the same back-end search engine (a servlet or cgi-script, let's say).  Rather than
 configure both HTTP Generative Controllers with the same information in their PATH field, we
 can abstract that information out to a single Configuration Element.  When the Interleave
 Controller "passes on" requests from "Search A" or "Search B", it will fill in the blanks with
 values from the HTTP default request Configuration Element.  So, we leave the PATH field
 blank for those requests, and put that information into the Configuration Element.  In this
case, this is a minor benefit at best, but it demonstrates the feature.</p>

<p>The next element in the tree is another HTTP default request, this time added to the
Thread Group itself.  The Thread Group has a built-in Logic Controller, and thus, it uses
this Configuration Element exactly as described above.  It fills in the blanks of any
Request that passes through.  It is extremely useful in web testing to leave the DOMAIN
field blank in all your HTTP Generative Controller elements, and instead, put that information
into an HTTP default request element, added to the Thread Group.  By doing so, you can
test your application on a different server simply by changing one field in your Test Plan.
Otherwise, you'd have to edit each and every Generative Controller.</p>

<p>The last element is a <a href="component_reference.html#cookie_manager">Cookie
Manager</a>.  A Cookie Manager should be added to all web tests - otherwise JMeter will
ignore cookies.  By adding it at the Thread Group level, we ensure that all HTTP requests
will share the same cookies.</p>

<p>Logic Controllers can be combined to achieve various results.  See the list of <a href="component_reference.html#logic_controllers">built-in
Logic Controllers</a>.</p>
</subsection>

</section>

</body>
</document>