<?xml version="1.0"?>
<document>

<properties>
  <title>User's Manual: Generative Controllers</title>
</properties>

<body>

<section name="12. Component Reference">

</section>

<section name="12.1 Generative Controllers" anchor="generative_controllers">

<subsection name="4.2.1.1 FTP Request" anchor="ftp_request">
<p>This controller lets you send an FTP "retrieve file" request to an FTP server.
If you are going to send multiple requests to the same FTP server, consider
using a <a href="ftp-config.html#request_defaults">FTP Request Defaults</a> Configuration
Element so you do not have to enter the same information for each FTP Request Generative
Controller. </p>
<p><img src="../images/screenshots/gen-controller/ftp-request.gif" width="407" height="238"></img></p>
<p><b>Property Descriptions:</b>
<ul>
  <li><b>Name</b> - Descriptive name for this controller that is shown in the tree. </li>
  <li><b>Server Name or IP</b> - Domain name or IP address of the FTP server.
JMeter assumes the FTP server is listening on the default port.</li>
  <li><b>File to Retrieve From Server</b> - Path and name of the file to retrieve.</li>
  <li><i>Login Configuration</i></li>
  <ul>
	 <li><b>Username</b> - FTP account username.</li>
	 <li><b>Password</b> - FTP account password.</li>
  </ul>
</ul>
</p>

<p><b>See Also:</b>
<br></br><a href="assertion.html">Assertion</a>,
<a href="ftp-config.html#request_defaults">FTP Request Defaults</a>,
<a href="build-ftp-test-plan.html">Building an FTP Test Plan</a></p>

</subsection>

<subsection name="4.2.1.2 HTTP Request" anchor="http_request">
<p>This controller lets you send an HTTP/HTTPS request to a web server.  It
also lets you control whether or not JMeter parses HTML files for images and
Java applets and sends HTTP requests to retrieve them.</p>
<p>If you are going to send multiple requests to the same web server, consider
using an <a href="http-config.html#request_defaults">HTTP Request Defaults</a>
Configuration Element so you do not have to enter the same information for each
HTTP Request controller.</p>
<p>Or, instead of manually adding HTTP Request controllers, you may want to use
JMeter's <a href="http-config.html#proxy_server">HTTP Proxy Server</a> to create
them.  This can save you time if you have a lot of HTTP requests or requests with many
parameters.</p>
<p>If the request requires a login authorization, you will also have to add an
<a href="http-config.html#auth_manager">HTTP Authorization Manager</a>
Configuration Element. And, if the request uses cookies, then you will also need an
<a href="http-config.html#cookie_manager">HTTP Cookie Manager</a>.  You can
add either of these elements to the Thread Group or the HTTP Request.  If you have
more than one HTTP Request that needs authorizations or cookies, then add the
elements to the Thread Group.  That way, all HTTP Request controllers will share the
same Authorization Manager and Cookie Manager elements.</p>
<p>If the request uses a technique called "URL Rewriting" to maintain sessions,
then see section
<a href="build-adv-web-test-plan.html#url_rewriting">6.x HTTP Requests and Session ID's: URL Rewriting</a>
for additional configuration steps.</p>
<p><img src="../images/screenshots/gen-controller/http-request.gif" width="562" height="635"></img></p>
<p><b>Property Descriptions:</b>
<ul>
  <li><b>Name</b> - Descriptive name for this controller that is shown in the tree. </li>
  <li><i>Web Server</i></li>
  <ul>
	  <li><b>Server</b> - Domain name or IP address of the web server.</li>
	  <li><b>Port</b> - (optional) Port the web server is listening.  If you leave this field
empty, JMeter assumes the default port.</li>
  </ul>
  <li><i>HTTP Request</i></li>
  <ul>
	 <li><b>Protocol</b> - HTTP or HTTPS.</li>
	 <li><b>Method</b> - HTTP GET or HTTP POST.</li>
	 <li><b>Path</b> - The path to resource (for example, /servlets/myServlet). If the
resource requires query string parameters, add them below in the
"Send Parameters With the Request" section.</li>
	 <li><i>Send Parameters With the Request</i></li>
	 <ul>
		<li><b>Name</b> - Parameter name</li>
		<li><b>Value</b> - Parameter value. You do not have to enter the value in
URL-Encoded format. JMeter will URL-Encode it for you when it sends
the HTTP request.</li>
		<li><b>Add</b> Button - Add a parameter.</li>
		<li><b>Delete</b> Button - Delete the currently selected parameter.</li>
	 </ul>
	 <li><i>Send a File With the Request</i></li>
	 <ul>
		<li><b>Filename</b> - Name of the file to send.</li>
		<li><b>Browse</b> Button - Select this button to browse the file system for a
filename.</li>
		<li><b>Parameter Name</b> - Name of the parameter.</li>
		<li><b>MIME Type</b> - MIME type (for example, text/plain).</li>
	 </ul>
  </ul>
  <li><i>Optional Tasks</i></li>
  <ul>
	 <li><b>Retrieve All Images and Java Applets</b> - Tell JMeter to parse the HTML file
and send HTTP/HTTPS requests for all images and Java applets referenced in the file.</li>
  </ul>
</ul>
</p>

<p><b>See Also:</b>
<br></br>
<a href="assertion.html">Assertion</a>,
<a href="build-web-test-plan.html">Building a Web Test Plan</a>,
<a href="build-adv-web-test-plan.html">Building an Advanced Web Test Plan</a>,
<a href="http-config.html#auth_manager">HTTP Authorization Manager</a>,
<a href="http-config.html#cookie_manager">HTTP Cookie Manager</a>,
<a href="http-config.html#header_manager">HTTP Header Manager</a>,
<a href="http-config.html#html_link_parser">HTTP HTML Link Parser</a>,
<a href="http-config.html#proxy_server">HTTP Proxy Server</a>,
<a href="http-config.html#request_defaults">HTTP Request Defaults</a>,
<a href="build-adv-web-test-plan.html#url_rewriting">HTTP Requests and Session ID's: URL Rewriting</a>
</p>

</subsection>

<subsection name="4.2.1.3 JDBC Request" anchor="jdbc_request">
<p>This controller lets you send an JDBC Request (an SQL query) to a database.</p>
<p>If you are going to send multiple requests to the same database, consider
using one or more of the Defaults Configuration Elements:
<a href="jdbc-config.html#login">Login</a>,
<a href="jdbc-config.html#conn_pool">Connection Pool</a>,
<a href="jdbc-config.html#sql_query">SQL Query</a>.
This way, you do not have to enter the same information for each JDBC Request
controller.</p>
<p><img src="../images/screenshots/gen-controller/jdbc-request.gif" width="466" height="454"></img></p>

<p><b>Property Descriptions:</b>
<ul>
  <li><b>Name</b> - Descriptive name for this controller that is shown in the tree. </li>
  <li><i>Database URL and JDBC Driver</i></li>
  <ul>
	  <li><b>JDBC URL</b> - URL of the database (for example,
"jdbc:weblogic:oracle"). Refer to your database's JDBC documentation for the
URL you should use.</li>
	  <li><b>Driver Class</b> - The database driver Java class (for example,
"weblogic.jdbc.oci.Driver"). Refer to your database's JDBC documentation for
the name of the JDBC driver class you should use.</li>
  </ul>
  <li><i>Login Configuration</i></li>
  <ul>
	 <li><b>Username</b> - FTP account username.</li>
	 <li><b>Password</b> - FTP account password.</li>
  </ul>
  <li><i>Database Connection Pool</i></li>
  <ul>
	 <li><b>Number of Connections in Pool</b> - Number of database connection
instances to create and keep active. The maximum value depends on your database.
Also, JMeter imposes a maximum of 100 connections.</li>
	 <li><b>Max Usage For Each Connection</b> - Maximum number of times JMeter
uses a database connection instance before recycling it (destroying and creating
a new instance).</li>
  </ul>
  <li><b>SQL Query String</b> - SQL query (for example, "select * from t_customers").</li>
</ul>
</p>

<p><b>See Also:</b>
<br></br>
<a href="assertion.html">Assertion</a>,
<a href="build-db-test-plan.html">Building a Database Test Plan</a>,
<a href="jdbc-config.html#login">JDBC Database Login Defaults</a>,
<a href="jdbc-config.html#conn_pool">JDBC Database Connection Pool Defaults</a>,
<a href="jdbc-config.html#sql_query">JDBC SQL Query Defaults</a>
</p>

</subsection>
</section>

<section name="12.2 Logic Controllers" anchor="logic_controllers">

<subsection name="4.2.2.1 Interleave Controller" anchor="interleave">
<p>If you add Generative or Logic Controllers to an Interleave Controller, JMeter will alternate among each of the
other controllers for each loop iteration. </p>

<p><b>Control Panel</b></p>
<p><img src="../images/screenshots/logic-controller/interleave-controller.gif" width="390" height="62"></img>
<br>Figure 1- Interleave Controller Control Panel</br></p>
<p>Properties:
<ul>
  <li>Name - Descriptive name for this controller that is shown in the tree. </li>
</ul>
</p>
<!--
For example, if you
add three HTTP Requests to an Interleave Controller and configure the Thread
Group to loop, here is the sequence in which JMeter sends the requests:
</p>
<table border="1" cellspacing="0" cellpadding="4">
<tr valign="top"><td>Loop Iteration</td><td>Description</td></tr>
<tr valign="top"><td>1</td><td>JMeter sends the first HTTP Request.</td></tr>
<tr valign="top"><td>2</td><td>JMeter sends the second HTTP Request.</td></tr>
<tr valign="top"><td>3</td><td>JMeter sends the third HTTP Request.</td></tr>
<tr valign="top"><td>4</td><td>Because there are no more requests in controller, JMeter start over and sends the first HTTP Request.</td></tr>
<tr valign="top"><td>5</td><td>JMeter sends the second HTTP Request.</td></tr>
<tr valign="top"><td>(and so on)</td><td>...</td></tr>
</table>
-->
<p><b>Example</b></p>

<p><a href="../demos/InterleaveTestPlan.jmx">Download</a> this example (see Figure 2).  In this example,
we configured the Thread Group to have two threads and a loop count of five, for a total of ten
requests. See the table below for the sequence JMeter sends the HTTP Requests.</p>

<table border="1" cellspacing="0" cellpadding="4">
<tr valign="top"><td>Loop Iteration</td><td>Each JMeter Thread Sends These HTTP Requests</td></tr>
<tr valign="top"><td>1</td><td>News Page</td></tr>
<tr valign="top"><td>2</td><td>FAQ Page</td></tr>
<tr valign="top"><td>3</td><td>Gump Page</td></tr>
<tr valign="top"><td>4</td><td>Because there are no more requests in controller, JMeter start over and sends the first HTTP Request, which is the News Page.</td></tr>
<tr valign="top"><td>5</td><td>FAQ Page</td></tr>
</table>

<p>Note, the File Reporter is configured to store the results in a file named
"interleave-test.dat" in the current directory.</p>

<p><img src="../images/screenshots/logic-controller/interleave.gif" width="368" height="210"></img>
<br>Figure 2 - Interleave Controller Example 1</br></p>

<p><b>Example</b></p>

<p><a href="../demos/InterleaveTestPlan2.jmx">Download</a> another example (see Figure 3).  In this
example, we configured the Thread Group
to have a single thread and a loop count of eight.  Notice that the Test Plan has an outer Interleave Controller with
two Interleave Controllers inside of it.</p>

<p>The outer Interleave Controller alternates between the
two inner ones.  Then, each inner Interleave Controller alternates between each of the HTTP Requests.  Each JMeter
thread will send the requests in the following order: Home Page, Bug Page, CVS Page, and FAQ Page.
Note, the File Reporter is configured to store the results in a file named "interleave-test2.dat" in the current directory.</p>

<p><img src="../images/screenshots/logic-controller/interleave2.gif" width="368" height="262"></img>
<br>Figure 3 - Interleave Controller Example 2</br></p>

</subsection>

<subsection name="4.2.2.2 Loop Controller" anchor="loop">
<p>If you add Generative or Logic Controllers to a Loop Controller, JMeter will
loop through them a certain number of times, in addition to the loop value you
specified for the Thread Group.  For example, if you add one HTTP Request to a
Loop Controller with a loop count of two, and configure the Thread Group loop
count to three, JMeter will send a total of 2 * 3 = 6 HTTP Requests.
</p>
<p><b>Control Panel</b></p>
<p><img src="../images/screenshots/logic-controller/loop-controller.gif" width="397" height="111"></img>
<br>Figure 4 - Loop Controller Control Panel</br></p>

<p><b>Example</b></p>
<p><a href="../demos/LoopTestPlan.jmx">Download</a> this example (see Figure 5).
In this example, we created a Test Plan that sends a particular HTTP Request
only once and sends another HTTP Request five times.</p>
<p>We configured the Thread Group for a single thread and a loop count value of
one. Instead of letting the Thread Group control the looping, we used a Loop
Controller.  You can see that we added one HTTP Request to the Thread Group and
another HTTP Request to a Loop Controller.  We configured the Loop Controller
with a loop count value of five.</p>

<p>JMeter will send the requests in the following order: Home Page, News Page,
News Page, News Page, News Page, and News Page. Note, the File Reporter
is configured to store the results in a file named "loop-test.dat" in the current directory.</p>

<p><img src="../images/screenshots/logic-controller/loop-example.gif" width="368" height="185"></img>
<br>Figure 5 - Loop Controller Example</br></p>

</subsection>

<subsection name="4.2.2.3 Modification Manager" anchor="mod_manager">
<p>Put description text here...</p>
<p>This element has no visual elements.</p>
</subsection>

<subsection name="4.2.2.4 Once Only Controller" anchor="once_only_controller">
<p>The Once Only Logic Controller tells JMeter to process the controller(s) inside it only once, regardless of the loop
count value you specify in the Thread Group or Loop Controller.</p>

<p>For testing that requires a login, consider placing the login request in this controller since each thread only needs
to login once to establish a session.</p>

<p><b>Control Panel</b></p>
<p><img src="../images/screenshots/logic-controller/once-only-controller.gif" width="390" height="62"></img>
<br>Figure x - Once Only Controller Control Panel</br></p>

<p><b>Example</b></p>
<p><a href="../demos/OnceOnlyTestPlan.jmx">Download</a> this example (see Figure x).
In this example, we created a Test Plan that has two threads that send HTTP request.
Each thread sends one request to the Home Page, followed by three requests to the Bug Page.
Although we configured the Thread Group to iterate three times, each JMeter thread only
sends one request to the Home Page because this request lives inside a Once Only Controller.</p>

<p>Each JMeter thread will send the requests in the following order: Home Page, Bug Page,
Bug Page, Bug Page. Note, the File Reporter is configured to store the results in a file named "loop-test.dat" in the current directory.</p>

<p><img src="../images/screenshots/logic-controller/once-only-example.gif" width="368" height="190"></img>
<br>Figure x. Once Only Controller Example</br></p>
</subsection>

<subsection name="4.2.2.5 Simple Controller" anchor="simple">

<p>The Simple Logic Controller lets  you organize your Generative Controllers and other
Logic Controllers.  Unlike other Logic Controllers, this controller provides no functionality beyond that of a
storage device.</p>

<p><b>Control Panel</b></p>
<p><img src="../images/screenshots/logic-controller/simple-controller.gif" width="390" height="62"></img>
<br>Figure x. Simple Controller Control Panel</br></p>

<p><b>Example</b></p>
<p><a href="../demos/SimpleTestPlan.jmx">Download</a> this example (see Figure x).
In this example, we created a Test Plan that sends two Ant HTTP requests and two
Log4J HTTP requests.  We grouped the Ant and Log4J requests by placing them inside
Simple Logic Controllers.  Remember, the Simple Logic Controller has no effect on how JMeter
processes the controller(s) you add to it.  So, in this example, JMeter sends the requests in the
following order: Ant Home Page, Ant News Page, Log4J Home Page, Log4J History Page.
Note, the File Reporter
is configured to store the results in a file named "simple-test.dat" in the current directory.</p>

<p><img src="../images/screenshots/logic-controller/simple-example.gif" width="368" height="245"></img>
<br>Figure x Simple Controller Example</br></p>
</subsection>
</section>

<section name="12.5 Assertions" anchor="assertions">

<subsection name="12.5.1  Basic Assertion" anchor="basic_assertion">
<p><b>Control Panel</b></p>
<p><img src="../images/screenshots/assertion/assertion.gif" width="446" height="296"></img>
<br>Figure 1 - Assertion Control Panel</br></p>
<p>Properties:
<ul>
  <li>Name - Descriptive name for this element that is shown in the tree. </li>
  <li><i>Response Field to Test</i></li>
  <ul>
	 <li>Text Response - </li>
	 <li>URL Sampled - </li>
  </ul>
  <li><i>Pattern Matching Rules</i></li>
  <ul>
	 <li>Contains - </li>
	 <li>Matches - </li>
	 <li>Not - </li>
  </ul>
  <li><i>Patterns to Test</i></li>
  <ul>
	 <li>(Text Area) - </li>
	 <li>Add Button - </li>
	 <li>Clear Button - </li>
  </ul>
</ul>
</p>

<p><b>Example</b></p>

<p><img src="../images/screenshots/assertion/example1a.gif" width="190" height="170"></img>
<br>Figure 2 - Test Plan</br></p>

<p><img src="../images/screenshots/assertion/example1b.gif" width="489" height="298"></img>
<br>Figure 3 - Assertion Control Panel with Pattern</br></p>

<p><img src="../images/screenshots/assertion/example1c-pass.gif" width="474" height="265"></img>
<br>Figure 4 - Assertion Listener Results (Pass)</br></p>

<p><img src="../images/screenshots/assertion/example1c-fail.gif" width="474" height="265"></img>
<br>Figure 5 - Assertion Listener Results (Fail)</br></p>

<p>The assertion control panel let's you add strings to be tested. These strings can
be regular expressions. You can also choose whether the strings will be expected
to match the entire response, or if the response is only expected to contain the
strings. You can attach multiple assertions to any controller for additionaly flexibility.</p>
</subsection>
</section>

<section name="12.6 Timers" anchor="timers">

<subsection name="12.6.1 Constant Timer" anchor="constant">
<p>If you want to have each thread pause for the same amount of time between
requests, use this timer.</p>

<p><img src="../images/screenshots/timers/constant_timer.gif" width="390" height="100" alt="Constant Timer"></img></p>

<p><b>Property Descriptions:</b>
<ul>
  <li><b>Name</b> - Descriptive name for this timer that is shown in the tree. </li>
  <li><b>Thread Delay</b> - Number of milliseconds to pause.</li>
</ul>
</p>


</subsection>

<subsection name="12.6.2 Gaussian Random Timer" anchor="gaussian">
<p>This timer pauses each thread request for a random amount of time, with most
of the time intervals ocurring near a particular value.  The total delay is the
sum of the Gaussian distributed value (with mean 0.0 and standard deviation 1.0) times
the deviation value you specify, and the offset value.</p>
<p><img src="../images/screenshots/timers/gauss_random_timer.gif" width="390" height="182" alt="Gaussian Random Timer"></img></p>

<p><b>Property Descriptions:</b>
<ul>
  <li><b>Name</b> - Descriptive name for this timer that is shown in the tree. </li>
  <li><b>Deviation</b> - Deviation in milliseconds.</li>
  <li><b>Constant Delay Offset</b> - Number of milliseconds to pause in addition
to the random delay.</li>
</ul>
</p>

</subsection>

<subsection name="12.6.3 Uniform Random Timer" anchor="uniform">
<p>This timer pauses each thread request for a random amount of time, with
each time interval having the same probability of occurring. The total delay
is the sum of the random value and the offset value.</p>
<p><img src="../images/screenshots/timers/uniform_random_timer.gif" width="390" height="182" alt="Uniform Random Timer"></img></p>

<p><b>Property Descriptions:</b>
<ul>
  <li><b>Name</b> - Descriptive name for this timer that is shown in the tree. </li>
  <li><b>Random Delay Maximum</b> - Maxium random number of milliseconds to
pause.</li>
  <li><b>Constant Delay Offset</b> - Numer of milliseconds to pause in addition
to the random delay.</li>
</ul>
</p>

</subsection>
</section>

</body>
</document>
