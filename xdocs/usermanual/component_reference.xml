<?xml version="1.0"?>
<document>

<properties>
  <title>User's Manual: Generative Controllers</title>
</properties>

<body>

<section name="13. Component Reference">



<subsection name="13.1 Generative Controllers" anchor="generative_controllers">

<component name="13.1.1 FTP Request" anchor="ftp_request" screenshot="../images/screenshots/gen-controller/ftp-request.gif">
<description>This controller lets you send an FTP "retrieve file" request to an FTP server.
If you are going to send multiple requests to the same FTP server, consider
using a <a href="ftp-config.html#request_defaults">FTP Request Defaults</a> Configuration
Element so you do not have to enter the same information for each FTP Request Generative
Controller. </description>
<properties>
	<property name="Name" required="No">Descriptive name for this controller that is shown in the tree.</property>
	<property name="Server Name or IP" required="Yes">Domain name or IP address of the FTP server.
JMeter assumes the FTP server is listening on the default port.</property>
	<property name="File to Retrieve From Server" required="Yes">Path and name of the file to retrieve.</property>
	<property name="Username" required="Usually">FTP account username.</property>
	<property name="Password" required="Usually">FTP account password.</property>
</properties>
<links>
	<link href="assertion.html">Assertion</link>
	<link href="#ftp_request_defaults">FTP Request Defaults</link>
	<link href="build-ftp-test-plan.html">Building an FTP Test Plan</link>
</links>

</component>

<component name="13.1.2 HTTP Request" anchor="http_request" screenshot="../images/screenshots/gen-controller/http-request.gif">

<description>
	<p>This controller lets you send an HTTP/HTTPS request to a web server.  It
	also lets you control whether or not JMeter parses HTML files for images and
	Java applets and sends HTTP requests to retrieve them.</p>
	<p>If you are going to send multiple requests to the same web server, consider
	using an <a href="http-config.html#request_defaults">HTTP Request Defaults</a>
	Configuration Element so you do not have to enter the same information for each
	HTTP Request controller.</p>

	<p>Or, instead of manually adding HTTP Request controllers, you may want to use
	JMeter's <a href="http-config.html#proxy_server">HTTP Proxy Server</a> to create
	them.  This can save you time if you have a lot of HTTP requests or requests with many
	parameters.</p>

	<p>If the request requires a login authorization, you will also have to add an
	<a href="http-config.html#auth_manager">HTTP Authorization Manager</a>
	Configuration Element. And, if the request uses cookies, then you will also need an
	<a href="http-config.html#cookie_manager">HTTP Cookie Manager</a>.  You can
	add either of these elements to the Thread Group or the HTTP Request.  If you have
	more than one HTTP Request that needs authorizations or cookies, then add the
	elements to the Thread Group.  That way, all HTTP Request controllers will share the
	same Authorization Manager and Cookie Manager elements.</p>

	<p>If the request uses a technique called "URL Rewriting" to maintain sessions,
	then see section
	<a href="build-adv-web-test-plan.html#url_rewriting">6.x HTTP Requests and Session ID's: URL Rewriting</a>
	for additional configuration steps.</p>
</description>

<properties>
	<property name="Name" required="No">Descriptive name for this controller that is shown in the tree.</property>
	<property name="Server" required="Yes">Domain name or IP address of the web server.</property>
	<property name="Port" required="No (defaults to 80)">Port the web server is listening to.</property>
	<property name="Protocol" required="Yes">HTTP or HTTPS.</property>
	<property name="Method" required="Yes">HTTP GET or HTTP POST.</property>
	<property name="Path" required="Yes">The path to resource (for example, /servlets/myServlet). If the
resource requires query string parameters, add them below in the
"Send Parameters With the Request" section.</property>
	<property name="Send Parameters With the Request" required="No">The query string will
	be generated from the list of parameters you provide.  Each parameter has a <i>name</i> and
	<i>value</i>.  The query string will be generated in the correct fashion, depending on
	the choice of "Method" you made (ie if you chose GET, the query string will be
	appended to the URL, if POST, then it will be sent separately).  Also, if you are
	sending a file using a multipart form, the query string will be created using the
	multipart form specifications.</property>
	<property name="Filename" required="No">Name of the file to send.  If left blank, JMeter
	does not send a file, if filled in, JMeter automatically sends the request as
	a multipart form request.</property>
	<property name="Parameter Name" required="No (Yes if Filename filled in)">Name of the web request parameter.</property>
	<property name="MIME Type" required="No (Yes if Filename filled in)">MIME type (for example, text/plain).</property>
	<property name="Retrieve All Images and Java Applets" required="No">Tell JMeter to parse the HTML file
and send HTTP/HTTPS requests for all images and Java applets referenced in the file.</property>
</properties>

<links>
	<link href="assertion.html">Assertion</link>
	<link href="build-web-test-plan.html">Building a Web Test Plan</link>
	<link href="build-adv-web-test-plan.html">Building an Advanced Web Test Plan</link>
	<link href="http-config.html#auth_manager">HTTP Authorization Manager</link>
	<link href="http-config.html#cookie_manager">HTTP Cookie Manager</link>
	<link href="http-config.html#header_manager">HTTP Header Manager</link>
	<link href="http-config.html#html_link_parser">HTTP HTML Link Parser</link>
	<link href="http-config.html#proxy_server">HTTP Proxy Server</link>
	<link href="http-config.html#request_defaults">HTTP Request Defaults</link>
	<link href="build-adv-web-test-plan.html#url_rewriting">HTTP Requests and Session ID's: URL Rewriting</link>
</links>

</component>

<component name="13.1.3 JDBC Request" anchor="jdbc_request" screenshot="../images/screenshots/gen-controller/jdbc-request.gif">

<description><p>This controller lets you send an JDBC Request (an SQL query) to a database.</p>
<p>If you are going to send multiple requests to the same database, consider
using one or more of the Defaults Configuration Elements:
<a href="jdbc-config.html#login">Login</a>,
<a href="jdbc-config.html#conn_pool">Connection Pool</a>,
<a href="jdbc-config.html#sql_query">SQL Query</a>.
This way, you do not have to enter the same information for each JDBC Request
controller.</p></description>

<properties>
	<property name="Name" required="No">Descriptive name for this controller that is shown in the tree.</property>
	<property name="JDBC URL" required="Yes">URL of the database (for example,
"jdbc:weblogic:oracle"). Refer to your database's JDBC documentation for the
URL you should use.</property>
	<property name="Driver Class" required="Yes">The database driver Java class (for example,
"weblogic.jdbc.oci.Driver"). Refer to your database's JDBC documentation for
the name of the JDBC driver class you should use.</property>
	<property name="Username" required="Usually (database dependent)">FTP account username.</property>
	<property name="Password" required="Usually (database dependent)">FTP account password.</property>
	<property name="Number of Connections in Pool" required="Yes">Number of database connection
instances to create and keep active. The maximum value depends on your database.
Also, JMeter imposes a maximum of 100 connections.</property>
	<property name="Max Usage For Each Connection" required="Yes">Maximum number of times JMeter
uses a database connection instance before recycling it (destroying and creating
a new instance).</property>
	<property name="SQL Query String" required="Yes">SQL query (for example, "select * from t_customers").</property>
</properties>

<links>
	<link href="assertion.html">Assertion</link>
	<link href="build-db-test-plan.html">Building a Database Test Plan</link>
	<link href="jdbc-config.html#login">JDBC Database Login Defaults</link>
	<link href="jdbc-config.html#conn_pool">JDBC Database Connection Pool Defaults</link>
	<link href="jdbc-config.html#sql_query">JDBC SQL Query Defaults</link>
</links>

</component>
</subsection>

<subsection name="13.2 Logic Controllers" anchor="logic_controllers">

<component name="13.2.1 Interleave Controller" anchor="interleave" screenshot="../images/screenshots/logic-controller/interleave-controller.gif">
<description><p>If you add Generative or Logic Controllers to an Interleave Controller, JMeter will alternate among each of the
other controllers for each loop iteration. </p>
</description>
<properties>
	<property name="name" required="No">Descriptive name for this controller that is shown in the tree.</property>
</properties>

<!--
For example, if you
add three HTTP Requests to an Interleave Controller and configure the Thread
Group to loop, here is the sequence in which JMeter sends the requests:
</p>
<table border="1" cellspacing="0" cellpadding="4">
<tr valign="top"><td>Loop Iteration</td><td>Description</td></tr>
<tr valign="top"><td>1</td><td>JMeter sends the first HTTP Request.</td></tr>
<tr valign="top"><td>2</td><td>JMeter sends the second HTTP Request.</td></tr>
<tr valign="top"><td>3</td><td>JMeter sends the third HTTP Request.</td></tr>
<tr valign="top"><td>4</td><td>Because there are no more requests in controller, JMeter start over and sends the first HTTP Request.</td></tr>
<tr valign="top"><td>5</td><td>JMeter sends the second HTTP Request.</td></tr>
<tr valign="top"><td>(and so on)</td><td>...</td></tr>
</table>
-->
<example title="Simple Interleave Example" anchor="simple_interleave_example">

<p><a href="../demos/InterleaveTestPlan.jmx">Download</a> this example (see Figure 1).  In this example,
we configured the Thread Group to have two threads and a loop count of five, for a total of ten
requests. See the table below for the sequence JMeter sends the HTTP Requests.</p>

<figure image="../images/screenshots/logic-controller/interleave.gif">Figure 1 - Interleave Controller Example 1</figure>
<br/>
<table border="1" cellspacing="0" cellpadding="4">
<tr valign="top"><td>Loop Iteration</td><td>Each JMeter Thread Sends These HTTP Requests</td></tr>
<tr valign="top"><td>1</td><td>News Page</td></tr>
<tr valign="top"><td>2</td><td>FAQ Page</td></tr>
<tr valign="top"><td>3</td><td>Gump Page</td></tr>
<tr valign="top"><td>4</td><td>Because there are no more requests in controller, JMeter start over and sends the first HTTP Request, which is the News Page.</td></tr>
<tr valign="top"><td>5</td><td>FAQ Page</td></tr>
</table>

<p>Note, the File Reporter is configured to store the results in a file named
"interleave-test.dat" in the current directory.</p>

</example>

<example title="Useful Interleave Example" anchor="useful_interleave_example">

<p><a href="../demos/InterleaveTestPlan2.jmx">Download</a> another example (see Figure 2).  In this
example, we configured the Thread Group
to have a single thread and a loop count of eight.  Notice that the Test Plan has an outer Interleave Controller with
two Interleave Controllers inside of it.</p>

<figure image="../images/screenshots/logic-controller/interleave2.gif">
	Figure 2 - Interleave Controller Example 2
</figure>

<p>The outer Interleave Controller alternates between the
two inner ones.  Then, each inner Interleave Controller alternates between each of the HTTP Requests.  Each JMeter
thread will send the requests in the following order: Home Page, Bug Page, CVS Page, and FAQ Page.
Note, the File Reporter is configured to store the results in a file named "interleave-test2.dat" in the current directory.</p>
</example>
</component>

<component name="13.2.2 Loop Controller" anchor="loop" screenshot="../images/screenshots/logic-controller/loop-controller.gif">
<description><p>If you add Generative or Logic Controllers to a Loop Controller, JMeter will
loop through them a certain number of times, in addition to the loop value you
specified for the Thread Group.  For example, if you add one HTTP Request to a
Loop Controller with a loop count of two, and configure the Thread Group loop
count to three, JMeter will send a total of 2 * 3 = 6 HTTP Requests.
</p></description>

<properties>
	<property name="Name" required="No"></property>
	<property name="Loop Count" required="Yes, unless &quot;Forever&quot; is checked">
		The number of times the subelements of this controller will be iterated each time
		through a test run.
		<p><b>Special Case:</b> The Loop Controller embedded in the <a href="test_plan.html#thread_group">Thread Group</a>
		element behaves slightly differently.  Unless set to forever, it stops the test after
		the given number of iterations have been done.</p></property>
</properties>

<example title="Looping Example" anchor="loop_example">

<p><a href="../demos/LoopTestPlan.jmx">Download</a> this example (see Figure 3).
In this example, we created a Test Plan that sends a particular HTTP Request
only once and sends another HTTP Request five times.</p>

<figure image="../images/screenshots/logic-controller/loop-example.gif">Figure 3 - Loop Controller Example</figure>

<p>We configured the Thread Group for a single thread and a loop count value of
one. Instead of letting the Thread Group control the looping, we used a Loop
Controller.  You can see that we added one HTTP Request to the Thread Group and
another HTTP Request to a Loop Controller.  We configured the Loop Controller
with a loop count value of five.</p>
<p>JMeter will send the requests in the following order: Home Page, News Page,
News Page, News Page, News Page, and News Page. Note, the File Reporter
is configured to store the results in a file named "loop-test.dat" in the current directory.</p>

</example>

</component>

<component name="13.2.3 Modification Manager" anchor="mod_manager">
<description>
<p>This element has no visual elements, and needs no configuration.
The Modification Manager acts as a container for Modifier elements (which
are special kinds of Configuration Elements).</p>

<p>The Modification Manager can be used to introduce dynamic data into a test script.  As test samples pass through the
Modification Manager, it has the opportunity to modify them.  The Modification Manager holds Modifier elements which it
 uses to control how it modifies test samples.  If no Modifier elements are added, the Modification Manager has no effect.</p>

<p>There are two types of Modifiers.  Regular Modifiers (currently there aren't any implemented Modifiers), and response
based Modifiers (there is one HTML response based Modifier).</p>
</description>

<links>
	<link href="#html_link_parser">HTML Link Parser</link>
</links>
</component>

<subsection name="4.2.2.4 Once Only Controller" anchor="once_only_controller">
<p>The Once Only Logic Controller tells JMeter to process the controller(s) inside it only once, regardless of the loop
count value you specify in the Thread Group or Loop Controller.</p>

<p>For testing that requires a login, consider placing the login request in this controller since each thread only needs
to login once to establish a session.</p>

<p><b>Control Panel</b></p>
<p><img src="../images/screenshots/logic-controller/once-only-controller.gif" width="390" height="62"></img>
<br>Figure x - Once Only Controller Control Panel</br></p>

<p><b>Example</b></p>
<p><a href="../demos/OnceOnlyTestPlan.jmx">Download</a> this example (see Figure x).
In this example, we created a Test Plan that has two threads that send HTTP request.
Each thread sends one request to the Home Page, followed by three requests to the Bug Page.
Although we configured the Thread Group to iterate three times, each JMeter thread only
sends one request to the Home Page because this request lives inside a Once Only Controller.</p>

<p>Each JMeter thread will send the requests in the following order: Home Page, Bug Page,
Bug Page, Bug Page. Note, the File Reporter is configured to store the results in a file named "loop-test.dat" in the current directory.</p>

<p><img src="../images/screenshots/logic-controller/once-only-example.gif" width="368" height="190"></img>
<br>Figure x. Once Only Controller Example</br></p>
</subsection>

<subsection name="4.2.2.5 Simple Controller" anchor="simple">

<p>The Simple Logic Controller lets  you organize your Generative Controllers and other
Logic Controllers.  Unlike other Logic Controllers, this controller provides no functionality beyond that of a
storage device.</p>

<p><b>Control Panel</b></p>
<p><img src="../images/screenshots/logic-controller/simple-controller.gif" width="390" height="62"></img>
<br>Figure x. Simple Controller Control Panel</br></p>

<p><b>Example</b></p>
<p><a href="../demos/SimpleTestPlan.jmx">Download</a> this example (see Figure x).
In this example, we created a Test Plan that sends two Ant HTTP requests and two
Log4J HTTP requests.  We grouped the Ant and Log4J requests by placing them inside
Simple Logic Controllers.  Remember, the Simple Logic Controller has no effect on how JMeter
processes the controller(s) you add to it.  So, in this example, JMeter sends the requests in the
following order: Ant Home Page, Ant News Page, Log4J Home Page, Log4J History Page.
Note, the File Reporter
is configured to store the results in a file named "simple-test.dat" in the current directory.</p>

<p><img src="../images/screenshots/logic-controller/simple-example.gif" width="368" height="245"></img>
<br>Figure x Simple Controller Example</br></p>
</subsection>
</subsection>

<subsection name="13.4 Configuration Elements" anchor="config_elements">

<component name="13.4.1 HTML Link Parser" anchor="html_link_parser">
<description>
<p>This modifier parses HTML response from the server and extracts
links and forms.  A URL test sample that passes through this modifier will be examined to
see if it &quot;matches&quot; any of the links or forms extracted
from the immediately previous response.  It would then replace the values in the URL
test sample with appropriate values from the matching link or form.  Perl-type regular
expressions are used to find matches.</p>
</description>

<example title="Spidering Example" anchor="spider_example">
<p>Consider a simple example: let's say you wanted JMeter to &quot;spider&quot; through your site,
hitting link after link parsed from the HTML returned from your server (this is not
actually the most useful thing to do, but it serves as a good example).  You would create
a Modification Manager, and add the &quot;HTML Link Parser&quot; to it.  Then, create a
Web Test controller, and set the domain to &quot;.*&quot;, and the path likewise. This will
cause your test sample to match with any link found on the returned pages.  If you wanted to
restrict the spidering to a particular domain, then change the domain value
to the one you want.  Then, only links to that domain will be followed.
</p>
</example>

<example title="Poll Example" anchor="poll_example">
<p>A more useful example: given a web polling application, you might have a page with
several poll options as radio buttons for the user to select.  Let's say the values
of the poll options are very dynamic - maybe user generated.  If you wanted JMeter to
test the poll, you could either create test samples with hardcoded values chosen, or you
could let the HTML Link Parser parse the form, and insert a random poll option into
your URL test sample.  To do this, follow the above example, except, when configuring
your Web Test controller's URL options, be sure to choose &quot;POST&quot; as the
method.  Put in hard-coded values for the domain, path, and any additional form parameters.
Then, for the actual radio button parameter, put in the name (let's say it's called &quot;poll_choice&quot;),
and then &quot;.*&quot; for the value of that parameter.  When the modifier examines
this URL test sample, it will find that it &quot;matches&quot; the poll form (and
it shouldn't match any other form, given that you've specified all the other aspects of
the URL test sample), and it will replace your form parameters with the matching
parameters from the form.  Since the regular expression &quot;.*&quot; will match with
anything, the modifier will probably have a list of radio buttons to choose from.  It
will choose at random, and replace the value in your URL test sample.  Each time through
the test, a new random value will be chosen.</p>

<figure image="../images/screenshots/modification.gif">Figure # - Online Poll Example</figure>

<p>One important thing to remember is that you must create a test sample immediately
prior that will return an HTML page with the links and forms that are relevant to
your dynamic test sample.</p>
</example>

</component>
</subsection>

<section name="13.5 Assertions" anchor="assertions">

<subsection name="13.5.1  Basic Assertion" anchor="basic_assertion">
<p><b>Control Panel</b></p>
<p><img src="../images/screenshots/assertion/assertion.gif" width="446" height="296"></img>
<br>Figure 1 - Assertion Control Panel</br></p>
<p>Properties:
<ul>
  <li>Name - Descriptive name for this element that is shown in the tree. </li>
  <li><i>Response Field to Test</i></li>
  <ul>
	 <li>Text Response - </li>
	 <li>URL Sampled - </li>
  </ul>
  <li><i>Pattern Matching Rules</i></li>
  <ul>
	 <li>Contains - </li>
	 <li>Matches - </li>
	 <li>Not - </li>
  </ul>
  <li><i>Patterns to Test</i></li>
  <ul>
	 <li>(Text Area) - </li>
	 <li>Add Button - </li>
	 <li>Clear Button - </li>
  </ul>
</ul>
</p>

<p><b>Example</b></p>

<p><img src="../images/screenshots/assertion/example1a.gif" width="190" height="170"></img>
<br>Figure 2 - Test Plan</br></p>

<p><img src="../images/screenshots/assertion/example1b.gif" width="489" height="298"></img>
<br>Figure 3 - Assertion Control Panel with Pattern</br></p>

<p><img src="../images/screenshots/assertion/example1c-pass.gif" width="474" height="265"></img>
<br>Figure 4 - Assertion Listener Results (Pass)</br></p>

<p><img src="../images/screenshots/assertion/example1c-fail.gif" width="474" height="265"></img>
<br>Figure 5 - Assertion Listener Results (Fail)</br></p>

<p>The assertion control panel let's you add strings to be tested. These strings can
be regular expressions. You can also choose whether the strings will be expected
to match the entire response, or if the response is only expected to contain the
strings. You can attach multiple assertions to any controller for additionaly flexibility.</p>
</subsection>
</section>

<section name="13.6 Timers" anchor="timers">

<subsection name="13.6.1 Constant Timer" anchor="constant">
<p>If you want to have each thread pause for the same amount of time between
requests, use this timer.</p>

<p><img src="../images/screenshots/timers/constant_timer.gif" width="390" height="100" alt="Constant Timer"></img></p>

<p><b>Property Descriptions:</b>
<ul>
  <li><b>Name</b> - Descriptive name for this timer that is shown in the tree. </li>
  <li><b>Thread Delay</b> - Number of milliseconds to pause.</li>
</ul>
</p>


</subsection>

<subsection name="13.6.2 Gaussian Random Timer" anchor="gaussian">
<p>This timer pauses each thread request for a random amount of time, with most
of the time intervals ocurring near a particular value.  The total delay is the
sum of the Gaussian distributed value (with mean 0.0 and standard deviation 1.0) times
the deviation value you specify, and the offset value.</p>
<p><img src="../images/screenshots/timers/gauss_random_timer.gif" width="390" height="182" alt="Gaussian Random Timer"></img></p>

<p><b>Property Descriptions:</b>
<ul>
  <li><b>Name</b> - Descriptive name for this timer that is shown in the tree. </li>
  <li><b>Deviation</b> - Deviation in milliseconds.</li>
  <li><b>Constant Delay Offset</b> - Number of milliseconds to pause in addition
to the random delay.</li>
</ul>
</p>

</subsection>

<subsection name="13.6.3 Uniform Random Timer" anchor="uniform">
<p>This timer pauses each thread request for a random amount of time, with
each time interval having the same probability of occurring. The total delay
is the sum of the random value and the offset value.</p>
<p><img src="../images/screenshots/timers/uniform_random_timer.gif" width="390" height="182" alt="Uniform Random Timer"></img></p>

<p><b>Property Descriptions:</b>
<ul>
  <li><b>Name</b> - Descriptive name for this timer that is shown in the tree. </li>
  <li><b>Random Delay Maximum</b> - Maxium random number of milliseconds to
pause.</li>
  <li><b>Constant Delay Offset</b> - Numer of milliseconds to pause in addition
to the random delay.</li>
</ul>
</p>

</subsection>
</section>
</section>
</body>
</document>
